This tests ensures that link integrity is correctly setup when cloning an
object.

First we need to set up a link:

  >>> self.setRoles(('Manager',))
  >>> self.setText(portal.doc1, '<a href="doc2">a document</a>')

Next we clone the document:

  >>> token = portal.doc1.restrictedTraverse('authenticator').token()
  >>> portal.doc1.REQUEST.form['_authenticator'] = token
  >>> portal.doc1.restrictedTraverse('object_copy')()
  'http://nohost/plone/doc1'
  >>> token = portal.restrictedTraverse('authenticator').token()
  >>> portal.REQUEST.form['_authenticator'] = token
  >>> portal.restrictedTraverse('object_paste')()
  'http://nohost/plone'
  >>> 'copy_of_doc1' in portal
  True

Then we try to delete the document linked by the original document and its
clone.  Before we can do this we need to prevent the test framework from
choking on the exception we intentionally throw (see
docs/testRemovalTriggersConfirmation.txt for more info):

  >>> self.setStatusCode('LinkIntegrityNotificationException', 200)

Now we can continue and "click" the "delete" action.  The confirmation
page should list both documents:

  >>> browser = self.getBrowser(loggedIn=True)
  >>> browser.post('http://nohost/plone/doc2/object_delete?_authenticator=' + self.getAuthenticator(), '')
  >>> browser.contents
  '...<form ... action="http://nohost/plone/removeConfirmationAction">...
   ...<a href="http://nohost/plone/doc2"...Test Page 2...
   ...This...Page...is referenced by the following items:...
   ...<li>...href="http://nohost/plone/copy_of_doc1"...Test Page 1...</li>...
   ...<li>...href="http://nohost/plone/doc1"...Test Page 1...</li>...
   ...Would you like to delete it anyway?...'
